.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::PluginBundle::Author::MELO 3"
.TH Dist::Zilla::PluginBundle::Author::MELO 3 "2012-09-05" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::PluginBundle::Author::MELO \- Be like MELO when you build your dists
.SH "VERSION"
.IX Header "VERSION"
version 0.009
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # dist.ini
\&    [@Author::MELO]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the way \s-1MELO\s0 is building his dists, using Dist::Zilla and in
particular Dist::Zilla::Role::PluginBundle::Easy.
.PP
I'm still working through all the kinks so don't expect nothing stable
until this \fBwarning\fR disappears.
.PP
This Bundle was forked from
\&\s-1RWSTAUNER\s0.
.SH "RATIONALE"
.IX Header "RATIONALE"
These are the facts about my code that I would like the bundle to take
advantage off, or enforce, on all my dists:
.IP "I use git" 4
.IX Item "I use git"
This means that the release process should tag and push each new release
to my remote repositories.
.IP "I use Github for code and issue/bug tracking" 4
.IX Item "I use Github for code and issue/bug tracking"
Although I keep my code on several remote repositories, Github is the
public face for my code, and the official location of the main
repository for it.
.Sp
I also like the integration between the code tools and the issue
tracker, and the new issue dashboard, so I prefer to use Github Issues
as my prefered bugtracker for all my modules.
.Sp
I still track whatever is sent to \s-1RT\s0, but I'll most likely move the
ticket over to Issues and link the two.
.IP "Better to test as much as possible locally before shipping" 4
.IX Item "Better to test as much as possible locally before shipping"
Catching a typo or a bug before shipping is much better than receiving
the \s-1FAIL\s0 \s-1CPAN\s0 Testers report, so I enable a \fIlot\fR of Author and
Release tests.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Possible options and their default values:
.PP
.Vb 10
\&    auto_prereqs         = 1  ; enable AutoPrereqs
\&    disable_tests        =    ; corresponds to @TestingMania.disable
\&    fake_release         = 0  ; if true will use FakeRelease instead of \*(Aqreleaser\*(Aq
\&    authority            = \*(Aqcpan:MELO\*(Aq ; to make D::Z::P::Authority happy
\&    install_command      = cpanm \-v \-i . (passed to InstallRelease)
\&    placeholder_comments = 1 ; use \*(Aq# VERSION\*(Aq and \*(Aq# AUTHORITY\*(Aq comments
\&    releaser             = UploadToCPAN
\&    skip_plugins         =    ; default empty; a regexp of plugin names to exclude
\&    skip_prereqs         =    ; default empty; corresponds to AutoPrereqs.skip
\&    weaver_config        = @Author::MELO
\&    test_pod_links       = 1  ; Pod::Links and Pod::No404s enabled
\&    test_perl_critic     = 0  ; No Perl::Critic by default
\&    test_report_versions = 0  ; No ReportVersions::Tiny by default
.Ve
.PP
The \f(CW\*(C`fake_release\*(C'\fR option also respects \f(CW$ENV{DZIL_FAKERELEASE}\fR.
.PP
The \f(CW\*(C`release\*(C'\fR option can be set to an alternate releaser plugin
or to an empty string to disable adding a releaser.
This can make it easier to include a plugin that requires configuration
by just ignoring the default releaser and including your own normally.
.PP
\&\fB\s-1NOTE\s0\fR:
This bundle consumes Dist::Zilla::Role::PluginBundle::Config::Slicer
so you can also specify attributes for any of the bundled plugins.
The option should be the plugin name and the attribute separated by a dot:
.PP
.Vb 2
\&    [@Author::MELO]
\&    AutoPrereqs.skip = Bad::Module
.Ve
.PP
\&\fBNote\fR that this is different than
.PP
.Vb 3
\&    [@Author::MELO]
\&    [AutoPrereqs]
\&    skip = Bad::Module
.Ve
.PP
which will load the plugin a second time.
The first example actually alters the plugin configuration
as it is included by the Bundle.
.PP
See \*(L"\s-1CONFIGURATION\s0 \s-1SYNTAX\s0\*(R" in Config::MVP::Slicer for more information.
.PP
If your situation is more complicated you can use the \f(CW\*(C`skip_plugins\*(C'\fR
attribute to have the Bundle ignore that plugin
and then you can add it yourself:
.PP
.Vb 3
\&    [MetaNoIndex]
\&    directory = one\-dir
\&    directory = another\-dir
\&    
\&    [@Author::MELO]
\&    skip_plugins = MetaNoIndex
.Ve
.SH "EQUIVALENT \fIdist.ini\fP"
.IX Header "EQUIVALENT dist.ini"
This bundle is roughly equivalent to:
.PP
.Vb 1
\&  [Git::NextVersion]      ; autoincrement version from last tag
\&
\&  ; choose files to include (dzil core [@Basic])
\&  [GatherDir]             ; everything under top dir
\&  [PruneCruft]            ; default stuff to skip
\&  [ManifestSkip]          ; custom stuff to skip
\&  ; use PruneFiles to specifically remove ^(dist.ini)$
\&  ; use PruneFiles to specifically remove ^(README.pod)$ (just for github)
\&
\&  ; munge files
\&  [Authority]             ; inject $AUTHORITY into modules
\&  do_metadata = 1         ; default
\&  [NextRelease]           ; simplify maintenance of Changes file
\&  ; use W3CDTF format for release timestamps (for unambiguous dates)
\&  time_zone = UTC
\&  format    = %\-9v %{yyyy\-MM\-dd\*(AqT\*(AqHH:mm:ss\*(AqZ\*(Aq}d
\&  [OurPkgVersion]         ; inject $VERSION (use PkgVersion if \*(Aqplaceholder_comments\*(Aq == 0)
\&  [Prepender]             ; add header to source code files
\&
\&  [PodWeaver]             ; munge POD in all modules
\&  config_plugin = @Author::MELO
\&  ; \*(Aqweaver_config\*(Aq can be set to an alternate Bundle
\&
\&  ; generate files
\&  [License]               ; generate distribution files (dzil core [@Basic])
\&  [Readme]
\&
\&  ; metadata
\&  [Bugtracker]            ; include bugtracker URL and email address (uses RT)
\&  [Repository]            ; determine git information (if \-e ".git")
\&  [GithubMeta]            ; overrides [Repository] if repository is on github
\&
\&  [AutoPrereqs]
\&  ; disable with \*(Aqauto_prereqs = 0\*(Aq
\&
\&  [MetaNoIndex]           ; encourage CPAN not to index:
\&  directory = corpus
\&  directory = examples
\&  directory = inc
\&  directory = share
\&  directory = t
\&  directory = xt
\&  namespace = Local
\&  namespace = t::lib
\&  package   = DB
\&
\&  [MetaProvides::Package] ; describe packages included in the dist
\&  meta_noindex = 1        ; ignore things excluded by above MetaNoIndex
\&
\&  [MinimumPerl]           ; automatically determine Perl version required
\&
\&  [MetaConfig]            ; include Dist::Zilla info in distmeta (dzil core)
\&  [MetaYAML]              ; include META.yml (v1.4) (dzil core [@Basic])
\&  [MetaJSON]              ; include META.json (v2) (more info than META.yml)
\&
\&  [Prereqs / TestRequires]
\&  Test::More = 0.96       ; recent Test::More (including proper working subtests)
\&
\&  [ExtraTests]            ; build system (dzil core [@Basic])
\&  [ExecDir]               ; include \*(Aqbin/*\*(Aq as executables
\&  [ShareDir]              ; include \*(Aqshare/\*(Aq for File::ShareDir
\&
\&  [MakeMaker]             ; create Makefile.PL
\&
\&  ; generate t/ and xt/ tests
\&  [ReportVersions::Tiny]  ; show module versions used in test reports
\&  [@TestingMania]         ; *Lots* of dist tests
\&  [Test::PodSpelling]     ; spell check POD (if installed)
\&
\&  [Manifest]              ; build MANIFEST file (dzil core [@Basic])
\&
\&  ; actions for releasing the distribution (dzil core [@Basic])
\&  [CheckChangesHasContent]
\&  [TestRelease]           ; run tests before releasing
\&  [ConfirmRelease]        ; are you sure?
\&  [UploadToCPAN]
\&  ; see CONFIGURATION for alternate Release plugin configuration options
\&
\&  [@Git]                  ; use Git bundle to commit/tag/push after releasing
\&  [InstallRelease]        ; install the new dist (using \*(Aqinstall_command\*(Aq)
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
We use a lot of modules and plugins and some of them can enable or
disable features based on environment variables. I've copied some of the
more useful ones to here.
.PP
= \s-1DZIL_FAKERELEASE\s0
.PP
Enable to skip the release to \s-1CPAN\s0 as the final step of a \f(CW\*(C`dzil release\*(C'\fR run.
.PP
= \s-1SKIP_POD_LINKCHECK\s0
.PP
If true, the Test::Pod::LinkCheck module is not used, and the Pod
links will not be checked.
.PP
See also the configuration \f(CW\*(C`test_pod_links\*(C'\fR to disable this check
permanently.
.PP
= \s-1SKIP_POD_NO404S\s0
.PP
If true, the Test::Pod::No404s module is not used, and any links on
your Pod will not be checked to see if they really exist.
.PP
See also the configuration \f(CW\*(C`test_pod_links\*(C'\fR to disable this check
permanently.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Dist::Zilla
.IP "\(bu" 4
Dist::Zilla::Role::PluginBundle::Easy
.IP "\(bu" 4
Dist::Zilla::Role::PluginBundle::Config::Slicer
.IP "\(bu" 4
Pod::Weaver
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc Dist::Zilla::PluginBundle::Author::MELO
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers
.Sp
The \s-1CPAN\s0 Testers is a network of smokers who run automated tests on uploaded \s-1CPAN\s0 distributions.
.Sp
<http://www.cpantesters.org/distro/D/Dist\-Zilla\-PluginBundle\-Author\-MELO>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
The \s-1CPAN\s0 Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
<http://matrix.cpantesters.org/?dist=Dist\-Zilla\-PluginBundle\-Author\-MELO>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Dependencies
.Sp
The \s-1CPAN\s0 Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=Dist::Zilla::PluginBundle::Author::MELO>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
The \s-1CPAN\s0 Ratings is a website that allows community ratings and reviews of Perl modules.
.Sp
<http://cpanratings.perl.org/d/Dist\-Zilla\-PluginBundle\-Author\-MELO>
.SS "Email"
.IX Subsection "Email"
You can email the author of this module at \f(CW\*(C`MELO at cpan.org\*(C'\fR asking for help with any problems you have.
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-dist\-zilla\-pluginbundle\-author\-melo at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/Public/Dist/Display.html?Name=Dist\-Zilla\-PluginBundle\-Author\-MELO>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
<https://github.com/melo/Dist\-Zilla\-PluginBundle\-Author\-Melo>
.PP
.Vb 1
\&  git clone https://github.com/melo/Dist\-Zilla\-PluginBundle\-Author\-Melo.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Pedro Melo <melo@simplicidade.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2011 by Pedro Melo.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
